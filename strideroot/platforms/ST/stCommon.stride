
nvicType ST_NVIC_TYPE {
    generic: GENERIC_NVIC
    meta: ""
}

# ---- GPIO

peripheralType ST_GPIO_ST_PIN {
    group: "GPIO PIN"
    registers: []
    genericPeripheral: GENERIC_GPIO_PIN
}

peripheralPin ST_PIN {
    name: ""
    offset: 0x0
    type: ST_GPIO_ST_PIN
}

gpioType ST_GPIO_A {
    group: "GPIO"
    registers: [
        ST_GPIO_MODER_A, ST_GPIO_OTYPER, ST_GPIO_PUPDR, ST_GPIO_ODR, ST_GPIO_IDR
    ]
    readRegisters: [ ST_GPIO_IDR ]
    writeRegisters: [ ST_GPIO_ODR ]
    genericPeripheral: GENERIC_GPIO
}

gpioType ST_GPIO_X {
    group: "GPIO"
    registers: [
        ST_GPIO_MODER_X, ST_GPIO_OTYPER, ST_GPIO_PUPDR, ST_GPIO_ODR, ST_GPIO_IDR
    ]
    readRegisters: [ ST_GPIO_IDR ]
    writeRegisters: [ ST_GPIO_ODR ]
    genericPeripheral: GENERIC_GPIO
}

# ----- OTYPER
register ST_GPIO_MODER_A {
    name: "MODER"
    offset: 0x00
    length: 32
    resetValue: 0xEBFFFFFF
    values: [
        ST_GPIO_MODERX
    ]
    meta: "GPIO port mode register
00: Input mode
01: General purpose output mode
10: Alternate function mode
11: Analog mode (reset state)
"
    sourcePages: []
}

hwGenericMapping ST_GPIO_PIN_MODE {
    generic: GENERIC_GPIO_PIN_MODE
    size: 2
    values: [0, 1, 2, 3]
}

registerValue ST_GPIO_MODERX {
    name: "MODER"
    offset: 0
    length: 32
    mapsTo: ST_GPIO_PIN_MODE
}

register ST_GPIO_MODER_X {
    resetValue: 0xFFFFFFFF
    inherits: ST_GPIO_MODER_A
}

# ----- OTYPER

register ST_GPIO_OTYPER {
    name: "OTYPER"
    offset: 0x04
    length: 16
    resetValue: 0x00000000
    values: [
        ST_GPIO_OTX, ST_GPIO_OTYPER_RESERVED
    ]
    meta: "GPIO port output type register
[0:15] 16 values:
  0: Output push-pull (reset state)
  1: Output open-drain

[16:31] Reserved, must be kept at reset value"
    sourcePages: []
}

hwGenericMapping ST_GPIO_PIN_OUTPUT_TYPE {
    generic: GENERIC_GPIO_PIN_OUTPUT_TYPE
    size: 1
    values: [0, 1]
}

registerValue ST_GPIO_OTX {
    name: "OT"
    offset: 0
    length: 16
    mapsTo: ST_GPIO_PIN_OUTPUT_TYPE
}

registerValue ST_GPIO_OTYPER_RESERVED {
    name: "OTYPER_RESERVED"
    offset: 16
    length: 16
    mapsTo: none
    meta: "Reserved, must be kept at reset value"
}


# ---------------------------------------
register ST_GPIO_PUPDR {
    name: "PUPDR"
    offset: 0x0C
    length: 32
    resetValue: 0x24000000
    values: [
        ST_GPIO_PUPDRX
    ]
    meta: "GPIO port pull-up/pull-down register
[31:0] 16 values:

  0: No pull-up, pull-down
  1: Pull-up
  2: Pull-down
  3: Reserved
"

}

hwGenericMapping ST_GPIO_PIN_PULL_UP_DOWN {
    generic: GENERIC_GPIO_PIN_PULL_UP_DOWN
    size: 2
    values: [0, 1, 2]
}

registerValue ST_GPIO_PUPDRX {
    name: "PUPDR"
    offset: 0
    length: 32
    mapsTo: ST_GPIO_PIN_PULL_UP_DOWN
}

# ------- GPIO_ODR
register ST_GPIO_ODR {
    name: "ODR"
    offset: 0x14
    length: 32
    resetValue: 0x00000000
    values: [
        ST_GPIO_ODR
    ]
    meta: "ODRy: Port output data (y = 0..15)
    These bits can be read and written by software.
    Note:   For atomic bit set/reset, the ODR bits can be individually set
    and reset by writing to the GPIOx_BSRR register (x = A..I/J/K)"
    sourcePages: [283]
}

registerValue ST_GPIO_ODR {
    name: "ODR"
    offset: 0
    length: 16
    mapsTo: none # Do we need to connect to specify this mapping, or leave hardcoded as is in C++?
}


# ------- GPIO_ODR
register ST_GPIO_IDR {
    name: "IDR"
    offset: 0x10
    length: 32
    resetValue: 0x00000000
    values: [
        ST_GPIO_IDR
    ]
    meta: "DRy: Port input data (y = 0..15)
    These bits are read-only and can be accessed in word mode only. 
    They contain the input value of the corresponding I/O port."
    sourcePages: [283]
}

registerValue ST_GPIO_IDR {
    name: "IDR"
    offset: 0
    length: 16
    mapsTo: none # Do we need to connect to specify this mapping, or leave hardcoded as is in C++?
}


# USART #####################################################

peripheralType ST_USART {
    group: "USART"
    registers: [USART_CR1, USART_BRR]
    genericPeripheral: GENERIC_USART
}

peripheral USART1 {
    name: "USART1"
    offset: 0x40013800
    type: ST_USART
    pinsRequired: [USART1_TX, USART1_RX, USART1_CTS, USART1_RTS_DE_CK]
}

peripheral USART2 {
    name: "USART2"
    offset: 0x40004400
    type: ST_USART
}

register USART_CR1 {
    name: "CR1"
    offset: 0x00
    length: 32
    resetValue: 0x00000000
    values: [
        USART_CR1_UE, USART_CR1_UESM, USART_CR1_RE, USART_CR1_TE
    ]
    meta: "USART control register 1"

    sourcePages: [827]
}

registerValue USART_CR1_UE {
    name: "UE"
    offset: 0
    length: 1
    mapsTo: none
    valueNames: ["USART disabled", "USART enabled" ]
    meta: "USART enable

When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all
current operations are discarded. The USART configuration is kept, but all the USART_ISR
status flags are reset. This bit is set and cleared by software.

0: USART prescaler and outputs disabled, low-power mode
1: USART enabled

Note: To enter low-power mode without generating errors on the line, the TE bit must be
previously reset and the software must wait for the TC bit in the USART_ISR to be set
before resetting the UE bit.
The DMA requests are also reset when UE = 0 so the DMA channel must be disabled
before resetting the UE bit.
In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1,
regardless of the UE bit value.
"
}

registerValue USART_CR1_UESM {
    name: "UESM"
    offset: 1
    length: 1
    mapsTo: none
    valueNames: ["USART not able to wake up the MCU", "USART able to wake up the MCU" ]
    meta: "USART enable in low-power mode

When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
When this bit is set, the USART can wake up the MCU from low-power mode.
This bit is set and cleared by software.

0: USART not able to wake up the MCU from low-power mode.
1: USART able to wake up the MCU from low-power mode.

Note: It is recommended to set the UESM bit just before entering low-power mode and clear it
when exit from low-power mode.

If the USART does not support the wakeup from Stop feature, this bit is reserved and
must be kept at reset value. Refer to Section 26.4: USART implementation on page 777.
"
}

registerValue USART_CR1_RE {
    name: "RE"
    offset: 2
    length: 1
    mapsTo: none
    valueNames: ["Receiver is disabled", "Receiver is enabled" ]
    meta: "Receiver enable
This bit enables the receiver. It is set and cleared by software.
0: Receiver is disabled
1: Receiver is enabled and begins searching for a start bit
"
}

registerValue USART_CR1_TE {
    name: "TE"
    offset: 3
    length: 1
    mapsTo: none
    valueNames: ["Transmitter is disabled", "Transmitter is enabled" ]
    meta: "Transmitter enable
This bit enables the transmitter. It is set and cleared by software.
0: Transmitter is disabled
1: Transmitter is enabled
Note: During transmission, a low pulse on the TE bit (‘0’ followed by ‘1’) sends a preamble
(idle line) after the current word, except in Smartcard mode. In order to generate an idle
character, the TE must not be immediately written to ‘1’. To ensure the required duration,
the software can poll the TEACK bit in the USART_ISR register.
In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission
starts.
"
}


# =====

register USART_BRR {
    name: "BRR"
    offset: 0x0C
    length: 32
    resetValue: 0x00000000
    values: [
        USART_BRR_VALUE
    ]
    meta: "USART baud rate register
BRR[15:0]: USART baud rate
BRR[15:4]
BRR[15:4] = USARTDIV[15:4]
BRR[3:0]
When OVER8 = 0, BRR[3:0] = USARTDIV[3:0].
When OVER8 = 1:
BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right.
BRR[3] must be kept cleared
"
    sourcePages: [182]
}

registerValue USART_BRR_VALUE {
    name: "BRR"
    offset: 0
    length: 16
    mapsTo: none
    #valueNames: ["Output push-pull", "Output Open drain" ]
    meta: "USART_BRR value"
}

