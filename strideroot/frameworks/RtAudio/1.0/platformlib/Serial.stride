
# Serial Domains

constant _SerialBaudRate  { # Overriden by configuration
	value: 9600
}

constant _SerialPort  { # Overriden by configuration
	value: '"/dev/ttyACM0"'
}

resource SerialPort {
	substitutions: ["baud_rate", _SerialBaudRate,
					"serial_port", _SerialPort,
					"serial_process_rate", SerialProcessRate ]
    resourceIncludes: ['serial/serial.h']
    resourceDeclarations: [
		"serial::Serial serialPort(%%serial_port%%, %%baud_rate%%, serial::Timeout::simpleTimeout(1.0/%%serial_process_rate%%));"
		]
}


constant SerialProcessRate {
	value: 1000
}
 
_domainDefinition SerialDomain {
	domainName: "SerialDomain"
	framework: _RtAudioFramework
	parentDomain: RootDomain
	rate: SerialProcessRate
	resource: SerialPort
    substitutions: ["serial_process_rate", SerialProcessRate ]
    domainIncludes: []
    domainDeclarations: ["void serial_thread_func();",
		"bool serialthread_running {true};",
		"std::thread serialReadThread(serial_thread_func);"]
    domainInitializationCode: ""
	domainFunctionCode: "
void serial_thread_func() {
		std::string mLineBuffer;
		int mGranularity = 1000000.0/%%serial_process_rate%%; // nanoseconds
//[[Initialization]]
//[[/Initialization]]
  // Flush buffers
  //my_serial.flush();
  std::string lineBuffer; // Stores partial lines between reads
  const unsigned int bufferSize = 4096;
  uint8_t buffer[bufferSize];
  while (serialthread_running) {
    //        size_t bytes_wrote = my_serial.write(test_string);
    auto nextTime = std::chrono::high_resolution_clock::now() + std::chrono::nanoseconds(mGranularity);
    try {
      size_t count = serialPort.read(buffer, bufferSize);
//      mRingBuffer.write((char *) buffer, count);
//      onInput(buffer, count);
				
	if (count > 0) {
    size_t start = 0;
    size_t nullPos = 0;
    while(nullPos <= count) {
      if (buffer[nullPos] == '\n' || buffer[nullPos] == '\r') {
        buffer[nullPos] = '\0';
        char *thisLine = (char *) buffer + start;
        mLineBuffer += std::string(thisLine);
        if (mLineBuffer.size() > 0) {
          // Process line
			auto separatorIndex = mLineBuffer.find(':');
      		size_t _id = std::stoi(mLineBuffer.substr(0, separatorIndex));
      		std::string _value = mLineBuffer.substr(separatorIndex + 1);
      		float serialVar = std::stof(_value);				
//[[Processing]]
//[[/Processing]]
          	mLineBuffer.clear();
        }
        start = nullPos + 1;
      }
      nullPos++;
    }
    if (start < count) {
      char *thisLine = (char *) buffer + start;
      buffer[count] = '\0';
      mLineBuffer += std::string(thisLine);
    }
  }
      std::this_thread::sleep_until(nextTime);
    } catch (const serial::PortNotOpenedException &/*e*/) {
      serialthread_running = false;

    } catch (const serial::IOException &/*e*/) {
      serialthread_running = false;

    }
  }
}
	"
    domainCleanupCode: '
	serialthread_running = false;
	serialReadThread.join();
	std::cout << "Serial Thread joined." << std::endl;
	'
}

_domainDefinition SerialChannelDomain {
	domainName: "SerialChannelDomain"
	framework: _RtAudioFramework
	parentDomain: SerialDomain
	maxInstances: none
	rate: 0
    domainInitializationCode: ''
	domainFunctionCode: ''
	domainProcessingCode: '//[[Processing]]
//[[/Processing]]'
    domainCleanupCode: ''
}


# Serial ------------------------

platformBlock _SerialPrintType {
    typeName: '_serialPrintType'
	inputs: ["string", "string"]
#	outputs: 0
#   include: ["serial/serial.h", "iostream"]
	linkDir: ["serial/build"]
#    linkTo: ["serial"]
#    declarations: ['']
    initializations: ["// Not implemented"]
    processing: "//my_serial.write(test_string);
"
    inherits: [_Signal]
}
#
##ifdef _WIN32
#//      Sleep(milliseconds); // 100 ms
##else
#//      usleep(milliseconds*1000); // 100 ms
##endif

platformModule SerialChannelIn {
	domain: SerialChannelDomain
	inputs: []
	outputs: ["string"]
	ports: [
		_platformModulePort IdPort {
			name: "id"
			default: 0
		}
	]
	declarations: [''
	]
	initializations: [ '' ]
	globalDeclarations: []
	globalInitializations: []
	preProcessing: 'if (_id == %%property:id%%) {'
    processing: "serialVar"
	postProcessing: '} // id %%property:id%%	'
    inherits: [_Signal]
}


platformModule SerialChannelOut {
	domain: SerialChannelDomain
	inputs: [""]
	outputs: []
	ports: [
		_platformModulePort IdPort {
			name: "id"
			default: 0
		}
	]
	declarations: ['']
	initializations: [ '' ]
	globalDeclarations: []
	globalInitializations: []
	preProcessing: ''
    processing: 'serialPort.write(("%%property:id%%:" + std::to_string(%%intokens:0%%)).c_str());'
	postProcessing: ''
    inherits: [_Signal]
}




platformModule SerialIn {
	domain: SerialDomain
	inputs: ["real"]
	outputs: []
	ports: [
	]
	declarations: ['']
	initializations: [ '' ]
	globalDeclarations: []
	globalInitializations: []
	preProcessing: ''
    processing: '// Serial In Processing *******'
	postProcessing: ''
    inherits: [_Signal] 
}
