
constant AudioRate {
    value: 44100 # This will be overwritten by the configuration file
}

type _CompileOption {
  typeName: "_compileOption"
  properties: [
    typeProperty Name {
        name: "name"
        types: [""]
        default: ""
        required: on
    },
    typeProperty Defines {
        name: "defines"
        types: [""]
        default: ""
        required: on
    },
    typeProperty LinkLibraries {
        name: "linkLibraries"
        types: [""]
        default: ""
        required: on
    }
  ]
}

type _CompileOptionsGroup {
  typeName: "_compileOption"
  properties: [
    typeProperty Name {
        name: "name"
        types: [""]
        default: ""
        required: on
    },
    typeProperty Options {
        name: "options"
        types: [""]
        default: ""
        required: on
    },
    typeProperty Rules {
        name: "rules"
        types: [""]
        default: ""
        required: on
    }
  ]
}

_compileOption _RtAudioLinuxPulse {
  name: "Pulse"
  defines: ["__LINUX_PULSE__"]
  linkLibraries: ["pthread", "pulse-simple", "pulse"]
}

_compileOption _RtAudioLinuxAlsa {
  name: "Alsa"
  defines: ["__LINUX_ALSA__"]
  linkLibraries: ["asound", "pthread"]
}

_compileOption _RtAudioLinuxJack {
  name: "Jack"
  defines: ["__UNIX_JACK__"]
  linkLibraries: ["jack", "pthread"]
}

_compileOptionsGroup _RtAudioLinuxOptions {
  name: "RtAudio API"
  options: [_RtAudioLinuxPulse, _RtAudioLinuxAlsa, _RtAudioLinuxJack]
  rules: "multiple"
}



# ----------------------------------------
type _TemplateDirectives {
  typeName: "_templateDirectives"
  properties: [
    typeProperty FileName {
        name: "filename"
        types: [""]
        default: ""
        required: on
    },
    typeProperty GlobalsTag {
        name: "globalsTag"
        types: [""]
        default: ""
        required: on
    },
    typeProperty DeclarationsTag {
        name: "declarationsTag"
        types: [""]
        default: ""
        required: on
    },
    typeProperty InitializationTag {
        name: "initializationTag"
        types: [""]
        default: ""
        required: on
    },
    typeProperty ProcessingTag {
        name: "processingTag"
        types: [""]
        default: ""
        required: on
    },
    typeProperty CleanupTag {
        name: "cleanupTag"
        types: [""]
        default: ""
        required: on
    },
    typeProperty Substitutions {
        name: "substitutions"
        types: [""]
        default: ""
        required: on
    }
  ]
}

# --------------------------------

_domainDefinition AudioDomain {
	domainName: "AudioDomain"
	framework: _RtAudioFramework
	rate: AudioRate
	globalsTag: "Includes"
	declarationsTag: "Declarations"
    initializationTag: "Initialization"
	processingTag: "Processing"
	cleanupTag: "Cleanup"
    substitutions: [
      "num_in_chnls", _NumInputChannels,
      "num_out_chnls", _NumOutputChannels,
      "sample_rate", AudioRate,
      "device", _AudioDeviceIndex,
      "block_size", _AudioBlockSize
    ]
    domainIncludes: ["RtAudio.h"]
    domainDeclarations: ['#define NUM_IN_CHANNELS %%num_in_chnls%%',
    '#define NUM_OUT_CHANNELS %%num_out_chnls%%',
    'typedef float MY_TYPE;',
    '#define FORMAT RTAUDIO_FLOAT32'
]
    domainInitialization: '
    RtAudio adac;
    if ( adac.getDeviceCount() < 1 ) {
        std::cout << std::endl << "No audio devices found!" << std::endl;
        exit( -1 );
    }
    // Set the same number of channels for both input and output.
    unsigned int bufferBytes;
    unsigned int bufferFrames = %%block_size%%;
    int iDevice = 0;
    int oDevice = 0;
    unsigned int fs = %%sample_rate%%;


    RtAudio::StreamOptions options;
    //options.flags |= RTAUDIO_NONINTERLEAVED;

    RtAudio::StreamParameters iParams, oParams;
    iParams.deviceId = %%device%%; // first available device
    iParams.nChannels = %%num_in_chnls%%;
    oParams.deviceId = %%device%%; // first available device
    oParams.nChannels = %%num_out_chnls%%;

    bufferBytes = bufferFrames * NUM_OUT_CHANNELS * sizeof( MY_TYPE );

    if ( iDevice == 0 )
      iParams.deviceId = adac.getDefaultInputDevice();
    if ( oDevice == 0 )
        oParams.deviceId = adac.getDefaultOutputDevice();
    try {
        adac.openStream( &oParams, &iParams, FORMAT, fs, &bufferFrames, &audio_buffer_process, (void *)&bufferBytes, &options);
    }
    catch ( RtAudioError& e ) {
        e.printMessage();
        exit( -1 );
    }
    RtAudio::DeviceInfo info = adac.getDeviceInfo(%%device%%);
    std::cout << "Device = " << %%device%% << std::endl;
    std::cout << "Name = " << info.name << std::endl;
    std::cout << ": maximum output channels = " << info.outputChannels << std::endl;
    try {
      adac.startStream();
    }
    catch ( RtAudioError& e ) {
      e.printMessage();
      if ( adac.isStreamOpen() ) adac.closeStream();
      exit (-1);
    }
    %%domainCode%%
    char input;
    std::cout << "\nRunning ... press <enter> to quit.\n";
    std::cin.get(input);
    '
	domainFunction: '
	int audio_buffer_process( void *outputBuffer, void *inputBuffer, unsigned int nBufferFrames,
           double streamTime, RtAudioStreamStatus status, void *data )
{
  if ( status ) std::cout << "Stream over/underflow detected." << std::endl;
  //unsigned long *bytes = (unsigned long *) data;
  MY_TYPE *in = (MY_TYPE *)inputBuffer;
  MY_TYPE *out = (MY_TYPE *)outputBuffer;
  while(nBufferFrames-- > 0) {
%%domainCode%%
			in += NUM_IN_CHANNELS;
			out += NUM_OUT_CHANNELS;
  }
  return 0;
}
'
    domainCleanup: '
    // Stop the stream.
    try {
        if ( adac.isStreamRunning() ) adac.stopStream();
        if ( adac.isStreamOpen() ) adac.closeStream();
    }
    catch ( RtAudioError& e ) {
      e.printMessage();
    }
    %%domainCode%%
    '
}

constant _AudioDeviceIndex {value: 0}
constant _AudioBlockSize {value: 256}

# Audio ---------------
platformBlock _HwInput {
    typeName: '_hwInput'
#	numInputs: 0
	outputs: ["real"]
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: [""]
    processing: "in[%%bundle_index%%]"
    domain: AudioDomain
    inherits: [_Signal]
}

platformBlock _HwOutput {
    typeName: '_hwOutput'
	inputs: ["real"]
#	numOutputs: 0
#    include: []
#    linkTo: []
#    declarations: ['']
#    initializations: ["// %%token%% = 0;"]
    processing: "out[%%bundle_index%%] = %%intoken:0%%;"
    domain: AudioDomain
    inherits: [_Signal]
}

constant _NumInputChannels {value: 2}

_hwInput AudioIn[_NumInputChannels] {
    rate: AudioRate
    domain: AudioDomain
}

constant _NumOutputChannels {value: 2}

_hwOutput AudioOut[_NumOutputChannels] {
    rate: AudioRate
    domain: AudioDomain
}
