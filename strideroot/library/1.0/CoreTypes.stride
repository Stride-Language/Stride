
type _TypeProperty {
	typeName: "typeProperty"
	properties: [
		typeProperty Name {
			name: "name"
			types: ["CSP"]
			default: none
			required: on
		},
		typeProperty Direction {
			name: "direction"
			types: ["CSP"]
			default: "output"
			required: off
		},
		typeProperty Types {
			name: "types"
			types: ["CSP"]
			default: none
			required: on
		},
		typeProperty Default {
			name: "default"
			types: [""] # TODO how to handle hybrid port types?
			default: none
			required: on
		},
		typeProperty Required {
			name: "required"
			types: ["CBP"]
			default: none
			required: on
		},
		typeProperty Public {
			name: "public"
			types: ["CBP"]
			default: off
			required: off
		}
	]
	inherits: [_Base]
}

type _Type {
	typeName: "type"
	properties: [
		typeProperty TypeName {
			name: "typeName"
			types: ["CSP"]
			default: none
			required: on
		},
		typeProperty Properties {
			name: "properties"
			types: [""] 
			default: none
			required: on
		}
		typeProperty Inherits {
			name: "inherits"
			types: [""]
			default: [_Base]
			required: off
		},
		typeProperty Meta {
			name: "meta"
			types: ["CSP"]
			default: ""
			required: off
		}
	]
	meta: "type cannot inherit from 'base' to avoid circular dependencies"
}

type _Constant {
	typeName: "constant"
	properties: [
		typeProperty Value {
			name: "value"
			types: ["CSP", "CIP", "CRP", "CBP", "none"]
			default: none
			required: off
#			meta: "The constant value"
		}
	]
	meta: "Holds a constant value"
}

# TODO: Default to switch should be MasterReset
type _Switch {
	typeName: "switch"
	properties: [
		typeProperty Default {
			name: "default"
			types: ["CBP"]
			default: off
			required: off
		}
	]
	inherits: [_Streamable]
}

type _Trigger {
	typeName: "trigger"
	properties: [
	]
	inherits: [_Streamable]
}

type _Signal {
	typeName: "signal"
	properties: [
		typeProperty Value {
			name: "value"
			types: ["CIP", "CRP", "CSP"]
			default: 0.0
			required: off
		},
		typeProperty Default {
			name: "default"
			types: ["CIP", "CRP", "CSP"]
			default: 0.0
			required: off
		},
		typeProperty Type {
			name: "type"
			types: [""]
			default: Types::Real
			required: off
		},
		typeProperty _Reads {
			name: "_reads"
			types: [""]
			default: []
			required: off
			meta: "Used by the parser to keep track of stream connections"
		},
		typeProperty _Writes {
			name: "_writes"
			types: [""]
			default: []
			required: off
			meta: "Used by the parser to keep track of stream connections"
		}
	]
	inherits: [_Streamable]
}

type _Buffer {
	typeName: "buffer"
	properties: [
		typeProperty TypePort {
			name: "type"
			types: ["CSP", ""]
			default: none
			required: off
		},
		typeProperty SizePort {
			name: "size"
			types: ["CIP"]
			default: 0
			required: on
		},
		typeProperty RatePort {
			name: "rate"
			types: [""]
			default: none
			required: off
		},
		typeProperty DefaultPort {
			name: "default"
			types: [""]
			default: none
			required: off
		},
		typeProperty _InternalType {
			name: "_internalType"
			types: [""]
			default: _RingBufferType
			required: off
		}
	]
	inherits: [_DomainMember, _Resetable]
}


type _Table {
	typeName: "table"
	properties: [
		typeProperty SizePort {
			name: "size"
			types: ["CSP", ""]
			default: none
			required: on
		},
		typeProperty RatePort {
			name: "rate"
			types: ["CSP", ""]
			default: none
			required: off
		}
	]
	inherits: [_DomainMember, _Resetable]
}

type _GroupType {
	typeName: "group"
	properties: [
		typeProperty Members {
			name: "members"
			types: [""]
			default: none
			required: on
			meta: "Members of the group"
		}
	]
	meta: "Groups signals for block processing. Guarantees that all signals are processed together."
}


type _PlatformTypeClass {
	typeName: "platformTypeClass"
	properties: [
		typeProperty Types {
			name: "types"
			types: [""]
			default: none
			required: on
			meta: "Members of the the type class"
		}
	]
	meta: ""
}

type _PlatformDataType {
	typeName: "platformDataType"
	properties: [
		typeProperty Name {
			name: "name"
			types: ["CSP"]
			default: none
			required: on
			meta: "Name of the data type"
		}
		typeProperty PlatformName {
			name: "platformName"
			types: ["CSP"]
			default: none
			required: on
			meta: "Name of the data type on the target platform"
		}
		typeProperty Includes {
			name: "includes"
			types: [""]
			default: []
			required: off
			meta: "Additional include files for the type"
		}
	]
	meta: ""
}

