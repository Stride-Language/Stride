
module Oscillator {
    ports: [
		mainOutputPort OutputPort {
			block: Output
		}
		propertyInputPort FrequencyPort {
			name: "frequency"
			block: Frequency
			default: 440.0
			meta: "The frequency of the oscillator."
		},
		propertyInputPort AmplitudeProperty {
			name: "amplitude"
			block: Amplitude
			default: 1.0
			meta: "The amplitude of the oscillator."
		},
#		property TypeProperty {
#				name: "type"
#				block: Type
#				meta: "Possible options are 'Sine', 'Triangle', 'Saw', 'ReverseSaw', 'Square'."
#			},
		propertyInputPort StartPhaseProperty {
			name: "phase"
			block: StartPhase
			meta: "The starting phase of the oscillator."
		},
		propertyInputPort ResetProperty {
			name: "reset"
			block: Reset
			meta: "Resets the oscillator to the starting phase."
		}
    ]
    blocks: [
#        signal Frequency {
#			default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#		}
        signal Amplitude {
			default :       1.0
		}
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        signal StartPhase {
#			default :       0.0
#		}
#        switch Reset {
#			default :       off
#			domain: ResetDomain
#		}
#		signal ResetValue {
#			domain: ResetDomain
#		}
        signal Phase {
            default :       0.0
			reset: Reset
			domain: OutputPort.domain
		}
        signal PhaseInc {
			default :       0.0
			domain: FrequencyPort.domain
		}
        _sineType SineBlock {}
		reaction WrapPhase {
		ports: [
		]
		streams: [
			Phase -( 2 * _Pi) >> Phase;
			]
		}
    ]
    streams: [
        Frequency * 2.0 * _Pi / Output.rate >> PhaseInc;
        Phase >> SineBlock >> Level(gain: Amplitude) >> Output;
        Phase + PhaseInc >> Phase;
#        [Phase , ( 2 * _Pi) ] >> Greater() >> WrapPhase();
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}


module Impulse {
    ports: [
		mainOutputPort OutputPort {
			block: Output
#			domain: OutputDomain
		},
		propertyInputPort FrequencyPort {
			name: "frequency"
			block: Frequency
			default: 440.0
			meta: "The frequency of the oscillator."
		},
		propertyInputPort AmplitudePort {
			name: "amplitude"
			block: Amplitude
			default: 1.0
			meta: "The amplitude of the oscillator."
		}
    ]
    blocks: [
#        signal Type {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        signal StartPhase {
#                default :       0.0
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
#        switch Reset {Oscillator (frequency: 0.5) > 0 >> OnChange ()
#                default :       off
#                rate:           AudioRate # FIXME needs to be streamRate
#                domain:         streamDomain
#		}
        signal Phase {
                default :       1.0
                domain:         Output.domain
		}
        signal PhaseInc {
			default :       0.0
			domain: Frequency.domain
		}
		reaction WrapPhase {
			streams: [
				Phase - 1.0 >> Phase;
			]
		}
		
    ]
    streams: [
        Frequency / Output.rate >> PhaseInc;
        Phase + PhaseInc >> Phase;

        [Phase , 1 ] >> Greater() >> Select(whenOn: 1 whenOff: 0) >> Output;
        [Phase , 1 ] >> Greater() >> WrapPhase();
    ]
	meta: "Bipolar output [ -1. , 1. ] scaled by amplitude"
}
