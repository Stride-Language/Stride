
module Greater {
    ports: [
        mainOutputPort OutputPort {
            name:       'output'
            block: Output
        },
        mainInputPort InputPort {
            name:       'input'
            block: Input
    		meta: "A list with the two values to be compared"
        }
    ]
    blocks: [
        signal Input[2] {domain: OutputPort.domain},
		_greaterType GreaterBlock {}
    ]
    streams: [
       [Input[1], Input[2]] >> GreaterBlock >> Output;
    ]
    meta: "Compare two input values."
}

module GreaterOrEqual {
    ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
    ]
    blocks: [
		signal Input[2] {domain: OutputPort.domain},
		_greaterOrEqualType GreaterOrEqualBlock {}
    ]
    streams: [
       [Input[1], Input[2]] >> GreaterOrEqualBlock >> Output;
    ]
    meta: ""
}

module Less {
	ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
	]
    blocks: [
		signal Input[2] {}
		_lessType LessBlock {}
    ]
    streams: [
       [Input[1], Input[2]] >> LessBlock >> Output;
    ]
    meta: ""
}

module LessOrEqual {

	ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
	]
    blocks: [
		signal Input[2] {}
		_lessOrEqualType LessOrEqualBlock {}
    ]
    streams: [
       [Input[1], Input[2]] >> LessOrEqualBlock >> Output;
    ]
    meta: ""
}

module Equal {

	ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
	]
    blocks: [
        signal Input[2] { domain: OutputPort.domain},
        signal Output { domain: OutputPort.domain},
		_equalType EqualBlock {}
    ]
    streams: [
       [Input[1], Input[2]] >> EqualBlock >> Output;
    ]
    meta: ""
}

module NotEqual {

	ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
	]
    blocks: [
		_notEqualType NotEqualBlock {}
    ]
    streams: [
       [Input[1], Input[2]] >> NotEqualBlock >> Output;
    ]
    meta: ""
}

module Select {

	ports: [
		mainOutputPort OutputPort {
			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
			name:       'input'
			block: Input
		},
		propertyInputPort WhenOnProperty {
			name: "whenOn"
			block: WhenOn
			meta: ""
#			domain: WhenOnDomain
        },
		propertyInputPort WhenOffProperty {
			name: "whenOff"
			block: WhenOff
			meta: ""
#			domain: WhenOffDomain
        }
    ]
    blocks: [
        _selectType SelectBlock {}
    ]
    streams: [
        [Input, WhenOn, WhenOff]  >> SelectBlock >> Output;
    ]
    meta: ""
}

module Choose {

	ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
		propertyInputPort ConditionPort {
			name: "condition"
			block: Condition
			meta: ""
        }
    ]
    blocks: [
		signal Input[2] {}
        _chooseType ChooseBlock {}
    ]
    streams: [
        [Condition, Input[1], Input[2]]  >> ChooseBlock >> Output;
    ]
    meta: ""
}

module OnChange {

	ports: [
		mainOutputPort OutputPort {
    			name:       'output'
			block: Output
		},
		mainInputPort InputPort {
    			name:       'input'
			block: Input
		}
	]
    blocks: [
        switch Input {
                default :       off
        },
        switch Output {
                default :       off
        },
		switch OldInput {},
		reaction OnChangedReaction {
			output: Output
			ports: [
            port OutputPort {
            name:       'output'
            main: on
            block: Output
            direction:  'output'
        },
				port OutputProperty {
					name: "output"
					block: OutputValue
#					type: [""] # Any type for now
				}
			]
#			onExecution:
#			terminateWhen:
			blocks: [
				switch Output { }
				switch OutputValue {}
			]
			streams: [
				OutputValue >> Output;
			]
		}
    ]
    streams: [
#        Input != OldInput  >> OnChangedReaction(output: Input) >> Output;
		Input >> OldInput;
    ]
    meta: "Discard repetitions of a value. Can be use to turn synchronous signals to asynchronous messages."
}

module Compare {
    input: Input
    output: Output
    ports: [
    port OutputPort {
        name:       'output'
        main: on
        block: Output
        direction:  'output'
    },
    port InputPort {
        name:       'input'
        main: on
        size: 2
        direction:  'input'
    },
    port OperatorProperty {
			name: "operator"
			block: Operator
#			type: [""] # Any type for now
		},
		port ValueProperty {
			name: "value"
			block: Value
#			type: [""] # Any type for now
		}
	]
    blocks: [
        switch Output {},
		signal Operator {},
		signal Value {}
    ]
    streams: [

    ]
    meta: "Not implemented..."
}
